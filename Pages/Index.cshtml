@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<canvas id="matrixCanvas"></canvas>

<div class="container text-center" style="background-color: #121212; color: #0f0; height: 100vh; position: relative; z-index: 2;">

    <h1 class="display-4 mt-3" style="color: #0f0; text-shadow: 0 0 10px #0f0;">AI Video Trainer Studio</h1>

    <!-- Upload Section -->
    <div class="upload-container mt-5">
        <h2>Upload Video to Training Platform</h2>
        <form method="post" enctype="multipart/form-data" action="/UploadVideo" style="color: #0f0;">
            <div class="input-group mb-3">
                <label for="videoFile" class="form-label">Select Video File:</label>
                <input type="file" id="videoFile" name="videoFile" class="form-control" required style="color: #0f0; border-color: #0f0;">
            </div>
            <div class="input-group mb-3">
                <label for="videoTitle" class="form-label">Video Title:</label>
                <input type="text" id="videoTitle" name="videoTitle" class="form-control" required style="color: #0f0; border-color: #0f0;">
            </div>
            <div class="input-group mb-3">
                <label for="videoDescription" class="form-label">Video Description:</label>
                <textarea id="videoDescription" name="videoDescription" class="form-control" required style="color: #0f0; border-color: #0f0;"></textarea>
            </div>
            <button type="submit" class="btn upload-btn">Upload</button>
        </form>
    </div>

    <!-- Video List Section -->
    <div class="mt-5">
        <h2 style="color: #0f0; text-shadow: 0 0 10px #0f0;">Video List</h2>
        <div class="row">
            @foreach (var video in Model.Videos)
            {
                <div class="col-md-4 mb-4">
                    <div class="card" style="background-color: #222; border-color: #0f0;">
                        <video class="card-img-top" controls onmouseover="this.play()" onmouseout="this.pause();" style="border-bottom: 2px solid #0f0;">
                            <source src="@video.VideoUrl" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <div class="card-body" style="color: #0f0;">
                            <h5 class="card-title">@video.Title</h5>
                            <p class="card-text">@video.Description</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* ... your existing styles ... */

    #matrixCanvas {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1;
    }

    .upload-container {
        margin: 20px;
        padding: 20px;
        border: 2px solid #0f0;
        border-radius: 8px;
        background-color: #222;
        color: #0f0;
        position: relative;
    }

    .upload-container::before {
        content: '';
        position: absolute;
        top: 0; right: 0; bottom: 0; left: 0;
        border: 2px solid #0f0;
        opacity: 0;
        border-radius: 8px;
        box-shadow: 0 0 10px #0f0;
        animation: pulse 2s infinite;
    }

    .upload-btn {
        padding: 10px 20px;
        background-color: #121212;
        color: #0f0;
        border: 2px solid #0f0;
        border-radius: 4px;
        cursor: pointer;
        text-shadow: 0 0 5px #0f0;
    }

    .upload-btn:hover {
        background-color: #0f0;
        color: #121212;
    }

    .form-control:focus {
        border-color: #0f0;
        box-shadow: 0 0 10px #0f0;
    }

    .card:hover {
        border-color: #0f0;
        box-shadow: 0 0 10px #0f0;
    }

    keyframes pulse {
        0% { opacity: 0; }
        50% { opacity: .5; }
        100% { opacity: 0; }
    }
    .upload-container {
        margin: 20px;
        padding: 20px;
        border: 2px solid #0f0;
        border-radius: 8px;
        background-color: #222;
        color: #0f0;
        position: relative;
    }

    .upload-container::before {
        content: '';
        position: absolute;
        top: 0; right: 0; bottom: 0; left: 0;
        border: 2px solid #0f0;
        opacity: 0;
        border-radius: 8px;
        box-shadow: 0 0 10px #0f0;
        animation: pulse 2s infinite;
    }

    .upload-btn {
        padding: 10px 20px;
        background-color: #121212;
        color: #0f0;
        border: 2px solid #0f0;
        border-radius: 4px;
        cursor: pointer;
        text-shadow: 0 0 5px #0f0;
    }

    .upload-btn:hover {
        background-color: #0f0;
        color: #121212;
    }

    .form-control:focus {
        border-color: #0f0;
        box-shadow: 0 0 10px #0f0;
    }

    .card:hover {
        border-color: #0f0;
        box-shadow: 0 0 10px #0f0;
    }

    keyframes pulse {
        0% { opacity: 0; }
        50% { opacity: .5; }
        100% { opacity: 0; }
    }
</style>

<script>
    const canvas = document.getElementById('matrixCanvas');
    const ctx = canvas.getContext('2d');

    canvas.height = window.innerHeight;
    canvas.width = window.innerWidth;

    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789$%&';
    const devWords = ['function', 'alambda', 'return', 'class', 'const', 'azure'];
    const fontSize = 10;
    const columns = canvas.width / fontSize;
    const drops = [];

    for (let i = 0; i < columns; i++) {
        drops[i] = 1;
    }
    const faces = ['😊', '😂', '🥺', '😍'];

    function drawMatrix() {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        ctx.fillStyle = '#0f0';
        ctx.font = fontSize + 'px monospace';
        

        for (let i = 0; i < drops.length; i++) {
            const text = Math.random() > 0.95 ?
                devWords[Math.floor(Math.random() * devWords.length)] :
                characters.charAt(Math.floor(Math.random() * characters.length));
            ctx.fillText(text, i * fontSize, drops[i] * fontSize); if (Math.random() > 0.99) {
                const face = faces[Math.floor(Math.random() * faces.length)];
                const x = Math.floor(Math.random() * canvas.width);
                const y = Math.floor(Math.random() * canvas.height);
                ctx.fillText(face, x, y);
            }
            if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                drops[i] = 0;
            }

            drops[i]++;
        }
    }

    setInterval(drawMatrix, 33);
</script>